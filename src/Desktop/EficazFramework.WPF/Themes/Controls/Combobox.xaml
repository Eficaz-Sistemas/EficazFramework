<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:EfControls="clr-namespace:EficazFramework.Controls"
                    xmlns:EfControlsPrimitives="clr-namespace:EficazFramework.Controls.Primitives"
                    xmlns:EfConverters="clr-namespace:EficazFramework.Converters"
                    xmlns:EfAttachedProps="clr-namespace:EficazFramework.Controls.AttachedProperties"
                    xmlns:EfUtilties="clr-namespace:EficazFramework.Utilities">
    
    <EfConverters:ElevationEffectConverter x:Key="elevator"/>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSansPro}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="11.25 pt"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Background" Value="{DynamicResource Brush.Surface.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Surface.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type EfControls:Icon}">
                            <Setter Property="Height" Value="16"/>
                            <Setter Property="Width" Value="16"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="Opacity" Value="0.5"/>
                            <Setter Property="IsTabStop" Value="False"/>
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type EfControls:Icon}">
                                        <Path Fill="{TemplateBinding Foreground}"
                                              Width="{TemplateBinding Width}"
                                              Height="{TemplateBinding Height}"
                                              Stretch="Uniform"
                                              Data="{TemplateBinding Data}"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="1*" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" From="0" To="1" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" To="0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <TextBlock x:Name="tipTextHeader"
		                           Margin="0,0,0,0"
                                   Foreground="{DynamicResource Brush.TextElement.OnBackground}" 
		                           Text="{TemplateBinding EfAttachedProps:Control.TipText}"
                                   TextAlignment="Left"
                                   FontSize="7pt"
		                           Visibility="Visible"
		                           Padding="3,0,0,1"
		                           RenderTransformOrigin="0.5,1">
                            <TextBlock.RenderTransform>
                                <ScaleTransform x:Name="HeaderRippleOnFocusScaleTransform" ScaleX="1" ScaleY="1" />
                            </TextBlock.RenderTransform>
                        </TextBlock>
                        <Grid Grid.Row="1" Margin="0,0,0,0" Grid.ColumnSpan="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="36" x:Name="btStartcolumn" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="BaseBackground"
	                                Background="{TemplateBinding Background}"
	                                BorderBrush="{TemplateBinding BorderBrush}"
	                                BorderThickness="{TemplateBinding BorderThickness}"
									Grid.ColumnSpan="3"
	                                CornerRadius="3" />
                            <Border x:Name="FocusBackground"
                                    Background="{x:Null}"
                                    BorderThickness="0,0,0,3"
									Grid.ColumnSpan="3"
                                    CornerRadius="3"
                                    RenderTransformOrigin="0.5,0.5">
                                <Border.RenderTransform>
                                    <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="1" />
                                </Border.RenderTransform>
                            </Border>
                            <TextBlock x:Name="tipText" 
                                       Opacity="0"
                                       Margin="{TemplateBinding Padding}"
                                       Foreground="{TemplateBinding Foreground}" 
                                       FontSize="{TemplateBinding FontSize}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Style="{DynamicResource Style.TextBlock.Tip}" 
                                       TextAlignment="Justify" 
                                       Text="{TemplateBinding EfAttachedProps:Control.TipText}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
									   Padding="{TemplateBinding Padding}"
									   Grid.Column="1" />
                            <EfControls:ColorZone Grid.ColumnSpan="3" Opacity="0.25" EfAttachedProps:Control.CornerRadius="3"/>
                            <ContentPresenter Margin="1"
                                              Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(EfAttachedProps:TextBox.StartElement)}" 
                                              TextBlock.Foreground="{TemplateBinding Foreground}" 
                                              TextElement.Foreground="{TemplateBinding Foreground}"/>
                            <ToggleButton x:Name="toggleButton"
                                          TextElement.Foreground="{TemplateBinding Foreground}" 
                                          FontSize="{TemplateBinding FontSize}" 
                                          Style="{DynamicResource ComboBoxToggleButton}" 
                                          Foreground="{TemplateBinding Foreground}"
                                          BorderBrush="{x:Null}" 
                                          BorderThickness="0" 
                                          Padding="0"
                                          Grid.ColumnSpan="3"
                                          Background="Transparent" 
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Grid Grid.Column="1" Margin="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="contentPresenter" 
                                                  TextElement.Foreground="{TemplateBinding Foreground}" 
                                                  TextElement.FontSize="{TemplateBinding FontSize}" 
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                                  Content="{TemplateBinding SelectionBoxItem}" 
                                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  IsHitTestVisible="false" 
                                                  Margin="{TemplateBinding Padding}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <TextBox x:Name="PART_EditableTextBox" 
                                         Visibility="Collapsed"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" 
                                         Margin="{TemplateBinding Padding}" 
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="OverridesDefaultStyle" Value="true"/>
                                            <Setter Property="AllowDrop" Value="true"/>
                                            <Setter Property="MinWidth" Value="0"/>
                                            <Setter Property="MinHeight" Value="0"/>
                                            <Setter Property="Background" Value="{x:Null}" />
                                            <Setter Property="BorderBrush" Value="{x:Null}" />
                                            <Setter Property="BorderThickness" Value="0" />
                                            <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSansPro}"/>
                                            <Setter Property="FontWeight" Value="Medium"/>
                                            <Setter Property="FontSize" Value="11.25 pt"/>
                                            <Setter Property="Padding" Value="0" />
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type TextBox}">
                                                        <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="SelectionBrush" Value="{DynamicResource Brush.InputElement.Selection}"/>
                                            <Style.Triggers>
                                                <Trigger Property="EfAttachedProps:Control.Color" Value="Surface">
                                                    <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
                                                    <Setter Property="CaretBrush" Value="{DynamicResource Brush.Primary.Background}"/>
                                                    <Setter Property="SelectionBrush" Value="{DynamicResource Brush.Primary.Background}"/>
                                                </Trigger>
                                                <Trigger Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate">
                                                    <Setter Property="Foreground" Value="{DynamicResource Brush.SurfaceAlternate.Foreground}"/>
                                                    <Setter Property="CaretBrush" Value="{DynamicResource Brush.Primary.Background}"/>
                                                    <Setter Property="SelectionBrush" Value="{DynamicResource Brush.Primary.Background}"/>
                                                </Trigger>
                                                <Trigger Property="EfAttachedProps:Control.Color" Value="Primary">
                                                    <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
                                                    <Setter Property="CaretBrush" Value="{DynamicResource Brush.Primary.Background}"/>
                                                    <Setter Property="SelectionBrush" Value="{DynamicResource Brush.Primary.Background}"/>
                                                </Trigger>
                                                <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryDarken">
                                                    <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
                                                    <Setter Property="CaretBrush" Value="{DynamicResource Brush.Primary.Background.Darken}"/>
                                                    <Setter Property="SelectionBrush" Value="{DynamicResource Brush.Primary.Background.Darken}"/>
                                                </Trigger>
                                                <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryLighten">
                                                    <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
                                                    <Setter Property="CaretBrush" Value="{DynamicResource Brush.Primary.Background.Lighten}"/>
                                                    <Setter Property="SelectionBrush" Value="{DynamicResource Brush.Primary.Background.Lighten}"/>
                                                </Trigger>
                                                <Trigger Property="EfAttachedProps:Control.Color" Value="Secondary">
                                                    <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
                                                    <Setter Property="CaretBrush" Value="{DynamicResource Brush.Secondary.Background}"/>
                                                    <Setter Property="SelectionBrush" Value="{DynamicResource Brush.Secondary.Background}"/>
                                                </Trigger>
                                                <Trigger Property="EfAttachedProps:Control.Color" Value="Tertiary">
                                                    <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
                                                    <Setter Property="CaretBrush" Value="{DynamicResource Brush.Tertiary.Background}"/>
                                                    <Setter Property="SelectionBrush" Value="{DynamicResource Brush.Tertiary.Background}"/>
                                                </Trigger>
                                                <Trigger Property="IsReadOnly" Value="True">
                                                    <Setter Property="Foreground" Value="{DynamicResource Brush.Disabled.Foreground}"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                            <Border x:Name="BorderError" 
                                    BorderBrush="{DynamicResource Brush.Error.Background}" 
                                    BorderThickness="1" 
                                    HorizontalAlignment="Stretch" 
                                    Opacity="0" 
                                    CornerRadius="3"
                                    Grid.ColumnSpan="3"/>
                        </Grid>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true"
                               Grid.ColumnSpan="2" 
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               Margin="1" 
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               Placement="Bottom">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                <Border x:Name="dropDownBorder" 
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        Background="{TemplateBinding Background}"
                                        Effect="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(EfAttachedProps:Control.Elevation), Converter={StaticResource elevator}}"/>
                                <Border>
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                                <Condition Property="IsEditable" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="tipText" 
                                                         Storyboard.TargetProperty="Opacity" 
                                                         To="0.5" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="HeaderRippleOnFocusScaleTransform" 
                                                         Storyboard.TargetProperty="ScaleY" 
                                                         To="0" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="tipText" 
                                                         Storyboard.TargetProperty="Opacity" 
                                                         To="0" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="HeaderRippleOnFocusScaleTransform" 
                                                         Storyboard.TargetProperty="ScaleY" 
                                                         To="1" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="SelectedValue" Value="{x:Null}"/>
                                <Condition Property="IsEditable" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="tipText" 
                                                         Storyboard.TargetProperty="Opacity" 
                                                         To="0.5" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="HeaderRippleOnFocusScaleTransform" 
                                                         Storyboard.TargetProperty="ScaleY" 
                                                         To="0" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="tipText" 
                                                         Storyboard.TargetProperty="Opacity" 
                                                         To="0" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="HeaderRippleOnFocusScaleTransform" 
                                                         Storyboard.TargetProperty="ScaleY" 
                                                         To="1" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="EfAttachedProps:Control.ShowLabel" Value="False">
                            <Setter TargetName="tipTextHeader" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Background" Value="{x:Null}">
                            <Setter Property="Background" TargetName="dropDownBorder" Value="{DynamicResource Brush.Surface.Background}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="BaseBackground" Value="{DynamicResource Brush.Surface.Border}"/>
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="Opacity" TargetName="BorderError" Value="1"/>
                            <Setter Property="BorderBrush" TargetName="FocusBackground" Value="{DynamicResource Brush.Error.Background}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.6"/>
                            <Setter Property="Opacity" TargetName="PART_EditableTextBox" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="PART_EditableTextBox" Property="Opacity" Value="0.75"/>
                        </Trigger>
                        <Trigger Property="EfAttachedProps:TextBox.StartElement" Value="{x:Null}">
                            <Setter TargetName="btStartcolumn" Property="Width" Value="0"/>
                        </Trigger>
                        <Trigger Property="EfAttachedProps:Control.Color" Value="Surface">
                            <Setter TargetName="FocusBackground" Property="BorderBrush" Value="{DynamicResource Brush.Primary.Background}"/>
                        </Trigger>
                        <Trigger Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate">
                            <Setter TargetName="FocusBackground" Property="BorderBrush" Value="{DynamicResource Brush.Primary.Background}"/>
                        </Trigger>
                        <Trigger Property="EfAttachedProps:Control.Color" Value="Primary">
                            <Setter TargetName="FocusBackground" Property="BorderBrush" Value="{DynamicResource Brush.Primary.Background}"/>
                        </Trigger>
                        <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryDarken">
                            <Setter TargetName="FocusBackground" Property="BorderBrush" Value="{DynamicResource Brush.Primary.Background.Darken}"/>
                        </Trigger>
                        <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryLighten">
                            <Setter TargetName="FocusBackground" Property="BorderBrush" Value="{DynamicResource Brush.Primary.Background.Lighten}"/>
                        </Trigger>
                        <Trigger Property="EfAttachedProps:Control.Color" Value="Secondary">
                            <Setter TargetName="FocusBackground" Property="BorderBrush" Value="{DynamicResource Brush.Secondary.Background}"/>
                        </Trigger>
                        <Trigger Property="EfAttachedProps:Control.Color" Value="Tertiary">
                            <Setter TargetName="FocusBackground" Property="BorderBrush" Value="{DynamicResource Brush.Tertiary.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Surface">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate">
                <Setter Property="Foreground" Value="{DynamicResource Brush.SurfaceAlternate.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Primary">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryDarken">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryLighten">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Secondary">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Tertiary">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Brush.Disabled.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Disabled.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ComboBox}" x:Key="Style.Combobox.ClearCommand">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource Brush.InputElement.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.InputElement.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.InputElement}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSansPro}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="11.25 pt"/>
        <Setter Property="Padding" Value="2" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                <Border x:Name="dropDownBorder" 
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        Background="{TemplateBinding Background}"
                                        Effect="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(EfAttachedProps:Control.Elevation), Converter={StaticResource elevator}}"/>
                                <Border>
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                        <ToggleButton Padding="{TemplateBinding Padding}" FontSize="{TemplateBinding FontSize}" x:Name="toggleButton" Style="{DynamicResource ComboBoxToggleButton}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <Rectangle Grid.ColumnSpan="2" x:Name="BaseBorderBox" StrokeThickness="1" Stroke="{TemplateBinding BorderBrush}" Visibility="Visible"/>
                        <Border BorderBrush="{x:Null}" BorderThickness="0" Background="{x:Null}" Margin="{TemplateBinding Padding}">
                            <ContentPresenter TextElement.FontSize="{TemplateBinding FontSize}" x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="4,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <Button Command="{Binding Source={x:Static EfAttachedProps:ComboBox.ClearSelectionCommand}}" 
                                Name="PART_ClearButton"
                                CommandTarget="{Binding ElementName=PART_ClearButton}"
                                Grid.ColumnSpan="2"  Focusable="False" Margin="4,4,20,4" Style="{DynamicResource Style.Button.Caption}"
                                Background="{DynamicResource Brush.App.DarkWaterMark}" HorizontalAlignment="Right" Visibility="Collapsed">
                            <Path Width="12" Height="12" Fill="{DynamicResource Brush.TextElement}" Stretch="Fill" Data="{DynamicResource Icon.Editing.Cancel}" />
                        </Button>
                        <Border x:Name="BorderError" BorderThickness="1" HorizontalAlignment="Stretch" Opacity="0" BorderBrush="{DynamicResource Brush.Control.Error}" Grid.ColumnSpan="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Background" Value="{x:Null}">
                            <Setter Property="Background" TargetName="dropDownBorder" Value="{DynamicResource Brush.InputElement.Background}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Stroke" TargetName="BaseBorderBox" Value="{DynamicResource Brush.InputElement.Border.Focused}"/>
                            <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="BaseBorderBox" Value="{DynamicResource Brush.InputElement.Border.Focused}"/>
                            <Setter Property="Opacity" TargetName="BaseBorderBox" Value="0.45"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="Opacity" TargetName="BorderError" Value="1"/>
                            <Setter Property="BorderBrush" TargetName="BorderError" Value="{DynamicResource Brush.Control.Error}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                                </Grid.ColumnDefinitions>
                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                    <Grid >
                                        <Border x:Name="dropDownBorder" 
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="1"
                                                Background="{TemplateBinding Background}"
                                                Effect="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(EfAttachedProps:Control.Elevation), Converter={StaticResource elevator}}"/>
                                        <Border>
                                            <ScrollViewer x:Name="DropDownScrollViewer">
                                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Grid>
                                </Popup>
                                <ToggleButton Padding="{TemplateBinding Padding}" FontSize="{TemplateBinding FontSize}" x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource ComboBoxToggleButton}"/>
                                <Border x:Name="border" Background="{x:Null}" Margin="0">
                                    <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}">
                                                <Setter Property="OverridesDefaultStyle" Value="true"/>
                                                <Setter Property="AllowDrop" Value="true"/>
                                                <Setter Property="MinWidth" Value="0"/>
                                                <Setter Property="MinHeight" Value="0"/>
                                                <Setter Property="Background" Value="{x:Null}" />
                                                <Setter Property="BorderBrush" Value="{x:Null}" />
                                                <Setter Property="BorderThickness" Value="0" />
                                                <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSansPro}"/>
                                                <Setter Property="FontWeight" Value="Medium"/>
                                                <Setter Property="FontSize" Value="11.25 pt"/>
                                                <Setter Property="Padding" Value="0" />
                                                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type TextBox}">
                                                            <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </Border>
                                <Button Command="{Binding Source={x:Static EfAttachedProps:ComboBox.ClearSelectionCommand}}" Name="PART_ClearButton"  CommandTarget="{Binding ElementName=PART_ClearButton}" Grid.ColumnSpan="2"  Focusable="False" Margin="4,4,20,4" Style="{DynamicResource Style.Button.Caption}" Background="{DynamicResource Brush.App.DarkWaterMark}" Visibility="Collapsed">
                                    <Path Width="12" Height="12" Fill="{DynamicResource Brush.TextElement}" Stretch="Fill" Data="{DynamicResource Icon.Editing.Cancel}" />
                                </Button>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter TargetName="PART_ClearButton" Property="Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush.InputElement.Background.Disabled}" />
                                    <Setter Property="Foreground" Value="{DynamicResource Brush.InputElement.Disabled}" />
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="true"/>
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </MultiTrigger>
                                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Brush.InputElement.Background.Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" 
                                BorderBrush="Transparent" 
                                BorderThickness="1" 
                                HorizontalAlignment="Right" 
                                Margin="0" SnapsToDevicePixels="true" 
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" 
                                  Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" 
                                  Fill="{TemplateBinding Foreground}" 
                                  HorizontalAlignment="Center" 
                                  Margin="0" 
                                  VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Brush.InputElement.Border.Focused}"/>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.45"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Brush.InputElement.Border.Focused}"/>
                            
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Brush.InputElement.Border.Focused}"/>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.45"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Brush.InputElement.Border.Focused}"/>
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.45"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Brush.InputElement.Background.Focused}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Brush.InputElement.Background.Focused}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Brush.InputElement.Background.Focused}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource Brush.InputElement.Background.Disabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource Brush.InputElement.Disabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource Brush.InputElement.Background.Disabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource Brush.InputElement.Disabled}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource Brush.InputElement.Background.Disabled}" />
                            <Setter Property="Foreground" Value="{DynamicResource Brush.InputElement.Disabled}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.Combobox.DataGridCellEditor" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="FontSize" Value="{Binding Source={x:Static EfUtilties:DipHelper.FontSize_DataGridColumnText}}" />
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="-1"/>
        <Setter Property="EfAttachedProps:Control.ShowLabel" Value="False"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource Style.ComboboxItem.DataGridCellEditor}" />
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.TextElement}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource Brush.TextElement}"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border Name="Border"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsHighlighted" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush.Control.Background.Selected}"/>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Surface">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate">
                <Setter Property="Foreground" Value="{DynamicResource Brush.SurfaceAlternate.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Primary">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryDarken">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryLighten">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Secondary">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Tertiary">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="EfAttachedProps:Control.Color" Value="Surface"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Surface.Paper}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Surface.Paper}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.SurfaceAlternate.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="EfAttachedProps:Control.Color" Value="Primary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Primary.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Primary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="EfAttachedProps:Control.Color" Value="PrimaryDarken"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Primary.Background.Darken}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Primary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="EfAttachedProps:Control.Color" Value="PrimaryLighten"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Primary.Background.Lighten}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Primary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="EfAttachedProps:Control.Color" Value="Secondary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Secondary.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Secondary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="EfAttachedProps:Control.Color" Value="Tertiary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Tertiary.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Tertiary.Foreground}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource Brush.Disabled.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Disabled.Foreground}"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="Style.ComboboxItem.DataGridCellEditor" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
        <Setter Property="FontSize" Value="{Binding Source={x:Static EfUtilties:DipHelper.FontSize_DataGridColumnText}}" />
        <Setter Property="Padding" Value="5"/>
    </Style>

</ResourceDictionary>
