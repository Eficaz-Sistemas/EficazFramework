<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"                    
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:EfControls="clr-namespace:EficazFramework.Controls"
                    xmlns:EfConverters="clr-namespace:EficazFramework.Converters"
                    xmlns:EfAttachedProps="clr-namespace:EficazFramework.Controls.AttachedProperties"
                    xmlns:EfExtensions="clr-namespace:EficazFramework.Extensions"
                    xmlns:EfUtilties="clr-namespace:EficazFramework.Utilities">

    <EfConverters:DataGridColumnHeaderConverter x:Key="clheaderconverter" />
    <EfConverters:ElevationEffectConverter x:Key="elevationConv"/>

    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Surface.Border}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="EfAttachedProps:Control.CornerRadius" Value="5"/>
        <Setter Property="EfAttachedProps:Control.Elevation" Value="0"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSansPro}"/>
        <Setter Property="FontSize" Value="{Binding Source={x:Static EfUtilties:DipHelper.FontSize_DataGridColumnText}}" />
        <Setter Property="RowDetailsVisibilityMode" Value="Collapsed"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}"
                                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(EfAttachedProps:Control.CornerRadius)}"
                                SnapsToDevicePixels="True"
                                Effect="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(EfAttachedProps:Control.Elevation), Converter={StaticResource elevationConv}}">
                        </Border>
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}" 
                                                Focusable="false" 
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" 
                                                Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}">
                                        </Button>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{x:Null}"/>
        <Setter Property="VerticalGridLinesBrush" Value="{x:Null}"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="EnableRowVirtualization" Value="True" />
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="SelectionUnit" Value="FullRow">
                <Setter Property="CellStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}" >
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="BorderBrush" Value="{x:Null}" />
                        </Style>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Surface">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate">
                <Setter Property="Foreground" Value="{DynamicResource Brush.SurfaceAlternate.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Primary">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryDarken">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="PrimaryLighten">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Secondary">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
            <Trigger Property="EfAttachedProps:Control.Color" Value="Tertiary">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DataGrid Summary Row Template: -->
    <ControlTemplate TargetType="{x:Type DataGrid}" x:Key="ControlTemplate.DataGridRow.SummaryRow">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                <ScrollViewer.Template>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Grid>
                                                        <Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
                                                        <Polygon x:Name="Arrow" Fill="Black" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Fill" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                            <Grid Grid.Column="1" Grid.Row="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </ScrollViewer.Template>
                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </ScrollViewer>
        </Border>
    </ControlTemplate>
    
    <!--COLUMN:-->

    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="SeparatorBrush" Value="{DynamicResource Brush.Darken}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Surface.Paper}" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="EfAttachedProps:Control.CornerRadius" Value="5,5,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid x:Name="clheaderootelement" Margin="0">
                        <Grid.Resources>
                            <EfAttachedProps:DataGrid x:Key="datagridhelpers" />
                        </Grid.Resources>
                        <EfControls:ColorZone x:Name="BackgoundBorder"
                                            Grid.ColumnSpan="2"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            EfAttachedProps:Control.CornerRadius="{TemplateBinding EfAttachedProps:Control.CornerRadius}"
                                            Padding="{TemplateBinding Padding}" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*"/>
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border x:Name="surfacePaper" 
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Grid.ColumnSpan="2"
                                        Padding="{TemplateBinding Padding}"
                                        CornerRadius="{TemplateBinding EfAttachedProps:Control.CornerRadius}"
                                        Visibility="Collapsed">
                                </Border>
                                <ContentPresenter Margin="{TemplateBinding Padding}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentPresenter.Resources>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Foreground" Value="{DynamicResource Brush.TextElement.Title}" />
                                            <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSansPro}"/>
                                            <Setter Property="FontWeight" Value="Medium"/>
                                            <Setter Property="FontSize" Value="{Binding Source={x:Static EfUtilties:DipHelper.FontSize_DataGridColumnText}}"/>
                                        </Style>
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                                <Border x:Name="MouseOverPresenter" 
                                        BorderThickness="0" 
                                        Background="{Binding ElementName=BackgoundBorder, Path=Foreground}"
                                        Visibility="Collapsed" 
                                        Opacity="0.25"
                                        CornerRadius="{TemplateBinding EfAttachedProps:Control.CornerRadius}" />
                                <StackPanel Grid.Column="1" Margin="2,0" Orientation="Horizontal" x:Name="PART_headerFilterActions" Visibility="Collapsed">
                                    <Button IsTabStop="False" Name="PART_AddCommand" 
                                            Padding="0,4"
                                            Width="20"
                                            Margin="0,3,6,3"
                                            ToolTip="Filtros"
                                            BorderThickness="0"
                                            EfAttachedProps:Control.Elevation="0"
                                            EfAttachedProps:Control.CornerRadius="0"
                                            Command="{x:Static EfAttachedProps:DataGrid.FilterCommand}"
                                            CommandParameter="{Binding ElementName=PART_AddCommand}" 
                                            DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                                        <EfControls:Icon Height="11" Width="11"
                                                         Data="{DynamicResource Icon.MaterialDesign.Filter}"/>
                                        <Button.ContextMenu>
                                            <ContextMenu x:Name="filterContextMenu">
                                                <StackPanel Orientation="Horizontal">
                                                    <EfControls:Icon Height="16" Width="16"
                                                                     Margin="4,0" Opacity="0.6"
                                                                     Data="{DynamicResource Icon.MaterialDesign.Filter}"/>
                                                    <TextBox MinWidth="150" Margin="5,3,0,3"
                                                             Typography.Capitals="Normal"
                                                             EfAttachedProps:Control.ShowLabel="False"
                                                             EfAttachedProps:Control.TipText="filtrar por..." 
                                                             Text="{Binding Path=(EfAttachedProps:DataGrid.FilterText), RelativeSource={RelativeSource TemplatedParent}, TargetNullValue=''}" />
                                                    <Button Margin="5,3,0,3"
                                                            IsTabStop="True" 
                                                            Name="PART_ApplyFilterCommand" 
                                                            Grid.Row="1"
                                                            ToolTip="Aplicar Filtro"
                                                            Command="{Binding ApplyFilterCommand, Source={StaticResource datagridhelpers}}" 
                                                            CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                                                        <EfControls:Icon Data="{DynamicResource Icon.MaterialDesign.Check}"/>
                                                    </Button>
                                                </StackPanel>
                                            </ContextMenu>
                                        </Button.ContextMenu>
                                    </Button>
                                    <Button IsTabStop="False"
                                            Name="PART_RemoveCommand"
                                            Grid.Row="1"
                                            Padding="0,4"
                                            Width="20"
                                            Margin="0,3,6,3"
                                            BorderThickness="0"
                                            EfAttachedProps:Control.Elevation="0"
                                            EfAttachedProps:Control.CornerRadius="0"
                                            ToolTip="Remover Filtro" Style="{DynamicResource Style.Button.Caption}" 
                                            Command="{Binding ClearFilterCommand, Source={StaticResource datagridhelpers}}"
                                            CommandParameter="{Binding ElementName=clheaderootelement}" 
                                            Visibility="Collapsed">
                                        <EfControls:Icon Height="11" Width="11" Data="{DynamicResource Icon.Editing.Cancel}"/>
                                    </Button>
                                </StackPanel>
                            </Grid>

                        </EfControls:ColorZone>
                        <Rectangle HorizontalAlignment="Right"
                                   VerticalAlignment="Stretch" 
                                   Width="2" 
                                   Fill="{TemplateBinding SeparatorBrush}" 
                                   Opacity="0.75"
                                   Visibility="{TemplateBinding SeparatorVisibility}"/>

                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left">
                            <Thumb.Style>
                                <Style TargetType="{x:Type Thumb}">
                                    <Setter Property="Width" Value="8"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="Cursor" Value="SizeWE"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Margin="0,0,3,0">
                            <Thumb.Style>


                                <Style TargetType="{x:Type Thumb}">
                                    <Setter Property="Width" Value="8"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="Cursor" Value="SizeWE"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="EfAttachedProps:Control.Color" Value="Surface">
                            <Setter TargetName="surfacePaper" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="surfacePaper" Property="Background" Value="{DynamicResource Brush.Surface.Paper}"/>
                        </Trigger>
                        <Trigger Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate">
                            <Setter TargetName="surfacePaper" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="surfacePaper" Property="Background" Value="{DynamicResource Brush.Surface.Paper}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="CanUserSort" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MouseOverPresenter" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Column, RelativeSource={RelativeSource Self}, Converter={StaticResource clheaderconverter}, ConverterParameter=show_filter}" Value="True">
                            <Setter TargetName="PART_headerFilterActions" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger SourceName="PART_AddCommand" Property="IsMouseOver" Value="True">
                            <Setter TargetName="MouseOverPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger SourceName="PART_RemoveCommand" Property="IsMouseOver" Value="True">
                            <Setter TargetName="MouseOverPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Control.Border}"/>
        <Setter Property="FontSize" Value="13.333"/>
    </Style>




    <!--ROW:-->

    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="{DynamicResource Brush.Control.Error}" Margin="2,0,0,0" Text="!" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Grid>
                        <Border x:Name="DGR_Border"
                                Margin="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="True"
                                Opacity="1"
                                CornerRadius="3">
                        </Border>
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Visibility="{TemplateBinding DetailsVisibility}"/>
                            <DataGridRowHeader Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                        </SelectiveScrollingGrid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="4,2"/>
        <Style.Triggers>
            <Trigger Property="IsNewItem" Value="True">
                <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Disabled.Foreground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Surface"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Surface.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.SurfaceAlternate.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.SurfaceAlternate.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Primary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Primary.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Primary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="PrimaryDarken"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Primary.Background.Darken}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Primary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="PrimaryLighten"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Primary.Background.Lighten}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Primary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Secondary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Secondary.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Secondary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Tertiary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Tertiary.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Tertiary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Gray50}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type DataGridRow}"  x:Key="Style.DataGridRow.NoSelection">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="{DynamicResource Brush.Control.Error}" Margin="2,0,0,0" Text="!" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Grid>
                        <Border x:Name="DGR_Border"
                                Margin="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="True"
                                Opacity="1"
                                CornerRadius="3">
                        </Border>
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Visibility="{TemplateBinding DetailsVisibility}"/>
                            <DataGridRowHeader Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                        </SelectiveScrollingGrid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="4,2"/>
        <Style.Triggers>
            <Trigger Property="IsNewItem" Value="True">
                <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Disabled.Foreground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Surface"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Primary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="PrimaryDarken"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="PrimaryLighten"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Secondary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Tertiary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>



    <!-- ROW HEADER: -->
    <BooleanToVisibilityConverter x:Key="rhbool2VisibilityConverter"/>
    
    <Style x:Key="Style.Thumb.RowHeaderGripper" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeNS"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" >
                            <!--<Themes:DataGridHeaderBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" IsPressed="{TemplateBinding IsPressed}" IsHovered="{TemplateBinding IsMouseOver}" IsSelected="{TemplateBinding IsRowSelected}" Orientation="Horizontal" Padding="{TemplateBinding Padding}" SeparatorBrush="{TemplateBinding SeparatorBrush}" SeparatorVisibility="{TemplateBinding SeparatorVisibility}">-->
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <Control SnapsToDevicePixels="false" Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Visibility="{Binding (Validation.HasError), Converter={StaticResource rhbool2VisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"/>
                            </StackPanel>
                            <!--</Themes:DataGridHeaderBorder>-->
                        </Border>
                        <Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource Style.Thumb.RowHeaderGripper}" VerticalAlignment="Top"/>
                        <Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource Style.Thumb.RowHeaderGripper}" VerticalAlignment="Bottom"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource Brush.Control.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.TextElement}"/>
        <Setter Property="SeparatorBrush" Value="{DynamicResource Brush.Control.Border}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Control.Border}"/>
    </Style>


    <!--CELL:-->

    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.TextElement}"/>
        <Setter Property="FontSize" Value="{Binding Source={x:Static EfUtilties:DipHelper.FontSize_DataGridColumnText}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid>
                        <Border Opacity="1" 
                                Margin="1"
                                CornerRadius="3"
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="True"/>
                        <ContentPresenter Margin="{TemplateBinding Padding}" 
                                          Focusable="False" 
                                          TextBlock.Foreground="{TemplateBinding Foreground}"
                                          TextElement.Foreground="{TemplateBinding Foreground}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.TextElement}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.TextElement.Disabled}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Surface"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Surface.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.SurfaceAlternate.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.SurfaceAlternate.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Primary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Primary.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Primary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="PrimaryDarken"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Primary.Background.Darken}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Primary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="PrimaryLighten"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Primary.Background.Lighten}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Primary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Secondary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Secondary.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Secondary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Tertiary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Tertiary.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Tertiary.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Brush.Gray50}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type DataGridCell}" x:Key="Style.DataGridCell.NoSelection">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="{Binding Source={x:Static EfUtilties:DipHelper.FontSize_DataGridColumnText}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid>
                        <Border Opacity="0.8" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                        <ContentPresenter Margin="{TemplateBinding Padding}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.TextElement.Disabled}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Surface"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="SurfaceAlternate"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Primary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="PrimaryDarken"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="PrimaryLighten"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Secondary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition  Property="IsSelected" Value="True"/>
                    <Condition  Property="EfAttachedProps:Control.Color" Value="Tertiary"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Surface.Foreground}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
