@using MudBlazor
@using MudBlazor.Internal
@namespace EficazFramework.Components
@inherits MudBlazor.MudInput<string>

<div class="@Classname" style="@Style">
	@if (Adornment == MudBlazor.Adornment.Start)
	{
	 <MudInputAdornment Class="@AdornmentClassname" Icon="@AdornmentIcon" Color="@AdornmentColor" Size="@IconSize" Text="@AdornmentText" Edge="@MudBlazor.Edge.Start" AdornmentClick="@OnAdornmentClick" />
	}

    @*note: the value="@Text" is absolutely essential here. the inner html @Text is kept only for compatibility*@
    <textarea @ref="_elementReference" rows="@Lines" @attributes="UserAttributes" type="@InputTypeString" class="@InputClassname" placeholder="@Placeholder" disabled=@Disabled readonly="@ReadOnly" inputmode="@InputMode.ToString()"
			  @oninput="OnInput" @onchange="OnChange" @onblur="OnBlur" @onkeydown="OnKeyDown" @onkeyup="OnKeyUp" @onpaste="OnPaste" value="@Text"
			  @onkeydown:preventDefault="KeyDownPreventDefault" @onkeyup:preventDefault="KeyUpPreventDefault">@Text</textarea>

	@if (Clearable && !Disabled)
	{
	 <MudBlazor.MudIconButton Color="@MudBlazor.Color.Default" Icon="@MudBlazor.Icons.Material.Filled.Clear" Size="@MudBlazor.Size.Small" OnClick="@HandleClearButtonAsync" Class="mud-icon-button-edge-end" />
	}

	@if (Adornment == MudBlazor.Adornment.End)
	{
	 <MudInputAdornment Class="@AdornmentClassname" Icon="@AdornmentIcon" Color="@AdornmentColor" Size="@IconSize" Text="@AdornmentText" Edge="@MudBlazor.Edge.End" AdornmentClick="@OnAdornmentClick" />
	}

	@if (Variant == MudBlazor.Variant.Outlined)
	{
	 <div class="mud-input-outlined-border"></div>
	}
</div>